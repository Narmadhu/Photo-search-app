{"version":3,"sources":["Image.js","App.js","serviceWorker.js","index.js"],"names":["Image","tags","image","src","App","useState","images","setImages","search","setSearch","query","setQuery","useEffect","getImages","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","className","type","value","onChange","target","placeholder","map","key","id","largeImageURL","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mNAWeA,G,KARD,SAAC,GAAoB,EAAlBC,KAAmB,IAAbC,EAAY,EAAZA,MACrB,OACE,6BACE,yBAAKC,IAAKD,OCmDDE,EArDH,WACV,IADgB,EAGYC,mBAAS,IAHrB,mBAGTC,EAHS,KAGDC,EAHC,OAIYF,mBAAS,IAJrB,mBAITG,EAJS,KAIDC,EAJC,OAKUJ,mBAAS,SALnB,mBAKTK,EALS,KAKFC,EALE,KAOhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAUMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,gCAAD,OArBlB,qCAqBkB,cACeL,EADf,sBADZ,cACVM,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKhBX,EAAUW,EAAKC,MACfC,QAAQC,IAAIH,EAAKC,MAND,2CAAH,qDASf,OACE,6BACE,0BAAMG,SAjBQ,SAACC,GACjBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAcmBgB,UAAU,eACnC,2BACEC,KAAK,OACLC,MAAOnB,EACPoB,SAzBa,SAACL,GACpBd,EAAUc,EAAEM,OAAOF,QAyBbF,UAAU,eACVK,YAAY,sBAEd,4BAAQL,UAAU,aAAaC,KAAK,UAApC,WAIF,yBAAKD,UAAU,mBACZnB,EAAOyB,KAAI,SAAC7B,GAAD,OACV,kBAAC,EAAD,CAAO8B,IAAK9B,EAAM+B,GAAIhC,KAAMC,EAAMD,KAAMC,MAAOA,EAAMgC,sBCtC3CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.fd2b7b57.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst Image = ({ tags, image }) => {\r\n  return (\r\n    <div>\r\n      <img src={image} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Image;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Image from \"./Image\";\n\nconst App = () => {\n  const API = \"16268968-e4a1fae025bf6451f220b2f21\";\n\n  const [images, setImages] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"mango\");\n\n  useEffect(() => {\n    getImages();\n  }, [query]);\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  const getImages = async () => {\n    const response = await fetch(\n      `https://pixabay.com/api/?key=${API}&q=${query}&image_type=photo`\n    );\n    const data = await response.json();\n    setImages(data.hits);\n    console.log(data.hits);\n  };\n\n  return (\n    <div>\n      <form onSubmit={getSearch} className=\"submit-form\">\n        <input\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n          className=\"submit-input\"\n          placeholder=\"search for images\"\n        />\n        <button className=\"submit-btn\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"image_container\">\n        {images.map((image) => (\n          <Image key={image.id} tags={image.tags} image={image.largeImageURL} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}